SELECT USER
FROM DUAL;

--※ 이용자 계좌 관리
--① 계좌조회

--○ 계좌조회 뷰생성
CREATE OR REPLACE VIEW VIEW_MEMBER_BANK_INFO
AS
SELECT M.MEMBER_CODE, MBIF.MEMBER_BANK_NUMBER, MBIF.MEMBER_BANK, MBIF.MEMBER_BANK_HOLDER
FROM MEMBER M JOIN MEMBER_BANK_INFO MBIF
     ON M.MEMBER_CODE = MBIF.MEMBER_CODE;

--○ 이용자 계좌조회
SELECT MEMBER_CODE, MEMBER_BANK_NUMBER, MEMBER_BANK, MEMBER_BANK_HOLDER
FROM VIEW_MEMBER_BANK_INFO
WHERE MEMBER_CODE = 'M000001';

--② 계좌등록
INSERT INTO MEMBER_BANK_INFO(MEMBER_BANK_NUMBER, MEMBER_CODE, MEMBER_BANK, MEMBER_BANK_HOLDER)
VALUES(계좌번호, 회원코드, 은행명, 예금주);

--③ 계좌삭제 (공통)(프로시저)
--EXEC PRC_BANKINFO_DELETE('member', '4324234234');

--※이용자 마일리지 충전/환전 신청
--① 잔액 조회 쿼리
-- 이용자 잔액 조회 함수
SELECT F_USER_BALANCE('M000003')
FROM DUAL;

--② 이용자 계좌 목록 조회 쿼리
SELECT MEMBER_BANK_NUMBER, MEMBER_BANK
FROM MEMBER M, MEMBER_BANK_INFO MBIF
WHERE M.MEMBER_CODE = MBIF.MEMBER_CODE
  AND M.MEMBER_CODE = 'M000001';

--③ 이용자 마일리지 충전신청 프로시저
EXEC PRC_LOAD_REG('멤버코드', '계좌번호', 충전금액);

--④ 충전신청 안내페이지 정보 조회
SELECT MBIF.MEMBER_CODE, MBIF.MEMBER_BANK_NUMBER, MBIF.MEMBER_BANK, LR.LOAD_AMOUNT, TO_CHAR(LR.LOAD_REG_DATE,'YYYY-MM-DD HH24:MI:SS'),TO_CHAR(LR.LOAD_REG_DATE + 2,'YYYY-MM-DD HH24:MI:SS')
FROM MEMBER_BANK_INFO MBIF, LOAD_REG LR, LOAD_REG_BANK_INFO LRBIF
WHERE MBIF.MEMBER_BANK_NUMBER = LRBIF.MEMBER_BANK_NUMBER
  AND LRBIF.LOAD_REG_CODE = LR.LOAD_REG_CODE
  AND LR.LOAD_REG_DATE = (SELECT MAX(LOAD_REG_DATE)
                             FROM MEMBER_BANK_INFO A, LOAD_REG B
                            WHERE A.MEMBER_CODE = B.MEMBER_CODE
                              AND A.MEMBER_CODE = 'M000001');

--⑤ 마일리지 환전 프로시저
--EXEC PRC_USER_EXC_REG(MEMBERCODE, BANKNUMBER, AMOUNT)

--⑥ 환전 안내페이지 정보 조회
SELECT MBIF.MEMBER_BANK AS BANK, MBIF.MEMBER_BANK_NUMBER AS BANKNUMBER, ME.MEMBER_EXCHANGE_DATE AS REGDATE, ME.MEMBER_EXCHANGE_AMOUNT AS AMOUNT, MBIF.MEMBER_BANK_HOLDER AS BANKHOLDER
FROM MEMBER_EXCHANGE_LIST ME, MEMBER_BANK_INFO MBIF, MEMBER_EXCHANGE_BANK_INFO MEBI
WHERE MBIF.MEMBER_BANK_NUMBER = MEBI.MEMBER_BANK_NUMBER
  AND MEBI.MEMBER_EXCHANGE_CODE = ME.MEMBER_EXCHANGE_CODE
  AND ME.MEMBER_EXCHANGE_DATE = (
                                 SELECT MAX(MEMBER_EXCHANGE_DATE)
                                 FROM MEMBER_BANK_INFO A, MEMBER_EXCHANGE_LIST B
                                 WHERE A.MEMBER_CODE = B.MEMBER_CODE
                                   AND A.MEMBER_CODE = 'M000001'
                                );

--※ 이용자 마일리지 내역
--① 사용내역 
-- 뷰 생성
CREATE OR REPLACE VIEW PAYMENT_HISTORY
AS
SELECT L.LOC_CODE, B.MEMBER_CODE, LBIF.LOC_NAME, P.PACKAGE_PRICE, AP.APPLY_DATE
FROM BOOK_PAY_LIST BP 
RIGHT OUTER JOIN BOOK_LIST B
ON BP.BOOK_CODE = B.BOOK_CODE
    RIGHT OUTER JOIN APPLY_PACKAGE AP
    ON B.APPLY_PACKAGE_CODE = AP.APPLY_PACKAGE_CODE
        RIGHT OUTER JOIN PACKAGE P 
        ON AP.PACKAGE_CODE = P.PACKAGE_CODE
            RIGHT OUTER JOIN PACKAGE_FORM PF
            ON P.PACKAGE_FORM_CODE = PF.PACKAGE_FORM_CODE
                RIGHT OUTER JOIN LOC L 
                ON PF.LOC_CODE = L.LOC_CODE
                    RIGHT OUTER JOIN LOC_BASIC_INFO LBIF
                    ON L.LOC_CODE = LBIF.LOC_CODE;
                   
--사용내역 조회 쿼리
SELECT MEMBER_CODE AS MCODE, LOC_CODE AS LCODE, LOC_NAME AS NAME, PACKAGE_PRICE AS PRICE, APPLY_DATE AS PAYDATE
FROM PAYMENT_HISTORY
WHERE MEMBER_CODE = 'M000001'; 

--② 충전내역 조회
-- 충전내역 조회 뷰
CREATE OR REPLACE VIEW LOAD_REG_HISTORY
AS
(SELECT M.MEMBER_CODE, LR.LOAD_REG_CODE, LRBIF.MEMBER_BANK_NUMBER, MBIF.MEMBER_BANK, LR.LOAD_AMOUNT, LR.LOAD_REG_DATE, LT.LOAD_TYPE, LP.LOAD_PROC_DATE
FROM MEMBER M JOIN MEMBER_PROFILE MP
    ON M.MEMBER_CODE = MP.MEMBER_CODE
        RIGHT OUTER JOIN MEMBER_BANK_INFO MBIF
        ON M.MEMBER_CODE = MBIF.MEMBER_CODE
            RIGHT OUTER JOIN LOAD_REG_BANK_INFO LRBIF
            ON MBIF.MEMBER_BANK_NUMBER = LRBIF.MEMBER_BANK_NUMBER
                RIGHT OUTER JOIN LOAD_REG LR
                ON LRBIF.LOAD_REG_CODE = LR.LOAD_REG_CODE
                    LEFT OUTER JOIN LOAD_PROC LP
                    ON LR.LOAD_REG_CODE = LP.LOAD_REG_CODE
                        LEFT OUTER JOIN LOAD_TYPE LT
                        ON LP.LOAD_TYPE_CODE = LT.LOAD_TYPE_CODE);

-- 충전내역 조회
SELECT MEMBER_BANK_NUMBER AS BANKNUMBER, MEMBER_BANK AS BANK
      , LOAD_AMOUNT AS AMOUNT, LOAD_REG_DATE AS REGDATE
      , LOAD_TYPE AS LOADTYPE, LOAD_PROC_DATE AS PROCDATE
FROM LOAD_REG_HISTORY
WHERE MEMBER_CODE = 'M000001';

--③ 환전내역
-- 환전 내역 조회 뷰
CREATE OR REPLACE VIEW MEMBER_EXCHANGE_HISTORY
AS
SELECT M.MEMBER_CODE, MEBIF.MEMBER_BANK_NUMBER, MBIF.MEMBER_BANK, ME.MEMBER_EXCHANGE_AMOUNT, ME.MEMBER_EXCHANGE_DATE
FROM MEMBER M RIGHT OUTER JOIN MEMBER_EXCHANGE_LIST ME
ON M.MEMBER_CODE = ME.MEMBER_CODE
    JOIN MEMBER_EXCHANGE_BANK_INFO MEBIF
    ON ME.MEMBER_EXCHANGE_CODE = MEBIF.MEMBER_EXCHANGE_CODE
        JOIN MEMBER_BANK_INFO MBIF
        ON MEBIF.MEMBER_BANK_NUMBER = MBIF.MEMBER_BANK_NUMBER;
        
-- 환전 내역 조회 쿼리
SELECT MEMBER_BANK_NUMBER AS BANKNUMBER, MEMBER_BANK AS BANK, MEMBER_EXCHANGE_AMOUNT AS AMOUNT, MEMBER_EXCHANGE_DATE AS EXCHANGEDATE
FROM MEMBER_EXCHANGE_HISTORY
WHERE MEMBER_CODE = 'M000001';

--④ 환불내역 --번호,취소유형,공간명,예약일,결제금액,환불금액,환불처리일
-- 이용자 취소 
CREATE OR REPLACE VIEW REFUND_HISTORY
AS
SELECT M.MEMBER_CODE, '이용자취소'AS TYPE
     , LBIF.LOC_NAME, AP.APPLY_DATE
     , P.PACKAGE_PRICE, MCL.MEMBER_CANCEL_DATE
     , (CASE WHEN (TO_DATE(AP.APPLY_DATE, 'YYYY-MM-DD') - TO_DATE(MCL.MEMBER_CANCEL_DATE, 'YYYY-MM-DD')) < 7 
              THEN TRUNC(P.PACKAGE_PRICE * 0.5, -1) 
              ELSE TRUNC(P.PACKAGE_PRICE * 1, -1)
              END)  AS 환불금액  
FROM MEMBER M JOIN BOOK_LIST BL
ON M.MEMBER_CODE = BL.MEMBER_CODE
    JOIN MEMBER_CANCEL_LIST MCL --취소일자구하기
    ON BL.BOOK_CODE = MCL.BOOK_CODE 
        JOIN APPLY_PACKAGE AP -- 예약일 구하기
        ON BL.APPLY_PACKAGE_CODE = AP.APPLY_PACKAGE_CODE
            JOIN PACKAGE P -- 가격구하기
            ON AP.PACKAGE_CODE = P.PACKAGE_CODE
                JOIN PACKAGE_FORM PF 
                ON P.PACKAGE_FORM_CODE = PF.PACKAGE_FORM_CODE
                    JOIN LOC L
                    ON PF.LOC_CODE = L.LOC_CODE
                        JOIN LOC_BASIC_INFO LBIF -- 공간명 구하기
                        ON L.LOC_CODE = LBIF.LOC_CODE 

UNION
-- 호스트 취소
SELECT M.MEMBER_CODE, '호스트취소'
     , LBIF.LOC_NAME, AP.APPLY_DATE
     , P.PACKAGE_PRICE, HCL.HOST_CANCEL_DATE
     , P.PACKAGE_PRICE AS 환불금액
FROM MEMBER M JOIN BOOK_LIST BL
ON M.MEMBER_CODE = BL.MEMBER_CODE
    JOIN HOST_CANCEL_LIST HCL
    ON BL.BOOK_CODE = HCL.BOOK_CODE
        JOIN APPLY_PACKAGE AP -- 예약일 구하기
        ON BL.APPLY_PACKAGE_CODE = AP.APPLY_PACKAGE_CODE
            JOIN PACKAGE P -- 가격구하기
            ON AP.PACKAGE_CODE = P.PACKAGE_CODE
                JOIN PACKAGE_FORM PF 
                ON P.PACKAGE_FORM_CODE = PF.PACKAGE_FORM_CODE
                    JOIN LOC L
                    ON PF.LOC_CODE = L.LOC_CODE
                        JOIN LOC_BASIC_INFO LBIF -- 공간명 구하기
                        ON L.LOC_CODE = LBIF.LOC_CODE;                          

-- 환불내역 조회 쿼리
SELECT TYPE AS TYPE, LOC_NAME AS LNAME, APPLY_DATE AS APPLYDATE, PACKAGE_PRICE AS PRICE, MEMBER_CANCEL_DATE AS CANCELDATE, 환불금액 AS REFUNDAMOUNT
FROM REFUND_HISTORY
WHERE MEMBER_CODE = 'M000005';

--------------------------------------------------------------------------------
--※ 호스트 계좌 관리
--○ 계좌조회 뷰
CREATE OR REPLACE VIEW VIEW_HOST_BANK_INFO
AS
SELECT H.HOST_CODE, HBIF.HOST_BANK_NUMBER, HBIF.HOST_BANK, HBIF.HOST_BANK_HOLDER
FROM HOST H JOIN HOST_BANK_INFO HBIF
     ON H.HOST_CODE = HBIF.HOST_CODE;
     

--○ 계좌조회
SELECT *
FROM VIEW_HOST_BANK_INFO
WHERE HOST_CODE IN ('H000002');
    

--○ 계좌 삭제 (공통)(프로시저)
--EXEC PRC_BANKINFO_DELETE('host', '4324234234');

SELECT MEMBER_BANK_NUMBER AS BANKNUMBER, MEMBER_BANK AS BANK
		FROM MEMBER M, MEMBER_BANK_INFO MBIF
		WHERE M.MEMBER_CODE = MBIF.MEMBER_CODE
		AND M.MEMBER_CODE = 'M000002';


		SELECT F_USER_BALANCE('M000001') AS BALANCE
		FROM DUAL;

--※ 호스트 환전



--※ 호스트 마일리지 내역
--① 정산내역 
-- 정산내역 뷰
CREATE OR REPLACE VIEW CAL_HISTORY
AS
SELECT H.HOST_CODE, BL.MEMBER_CODE, LBIF.LOC_NAME, P.PACKAGE_PRICE
, BRL.BOOK_REFUND_DATE, AP.APPLY_DATE, HCL.HOST_CANCEL_DATE
,(CASE WHEN BRL.BOOK_REFUND_DATE IS NOT NULL
        THEN '이용자취소'
       WHEN HCL.HOST_CANCEL_DATE IS NOT NULL
        THEN '호스트취소'
        ELSE (CASE WHEN SYSDATE > AP.APPLY_DATE
                    THEN '정산완료'
                    ELSE '정산대기'
                    END)
        END ) AS STATUS
, (CASE WHEN BRL.BOOK_REFUND_DATE IS NOT NULL
        THEN (CASE WHEN (TO_DATE(SYSDATE, 'YYYY-MM-DD') - TO_DATE(BRL.BOOK_REFUND_DATE, 'YYYY-MM-DD')) < 7
                    THEN TRUNC(P.PACKAGE_PRICE * 0.5, -1)
                    ELSE TRUNC(P.PACKAGE_PRICE * 1, -1)
                    END)
        WHEN HCL.HOST_CANCEL_DATE IS NOT NULL
        THEN 0
        ELSE (CASE WHEN SYSDATE > AP.APPLY_DATE
                    THEN P.PACKAGE_PRICE
                    END)
        END ) AS AMOUNT
FROM HOST H JOIN LOC L                     -- 호스트코드 구하기
ON H.HOST_CODE = L.HOST_CODE
    JOIN LOC_BASIC_INFO LBIF                --공간명 구하기
    ON L.LOC_CODE = LBIF.LOC_CODE   
        JOIN PACKAGE_FORM PF
        ON L.LOC_CODE = PF.LOC_CODE
            JOIN PACKAGE P                  -- 가격 구하기
            ON PF.PACKAGE_FORM_CODE = P.PACKAGE_FORM_CODE   
                JOIN APPLY_PACKAGE AP       -- 예약일 구하기
                ON P.PACKAGE_CODE = AP.PACKAGE_CODE 
                    JOIN BOOK_LIST BL       -- 회원코드 구하기
                    ON AP.APPLY_PACKAGE_CODE = BL.APPLY_PACKAGE_CODE
                        LEFT OUTER JOIN BOOK_REFUND_LIST BRL        -- BOOK_REFUND_CODE NULL유무에따라 상태 출력
                        ON BL.BOOK_CODE = BRL.BOOK_CODE
                            LEFT OUTER JOIN HOST_CANCEL_LIST HCL
                            ON BL.BOOK_CODE = HCL.BOOK_CODE;

--정산내역 조회 쿼리
SELECT LOC_NAME AS LNAME, MP.MEMBER_NICKNAME AS NICKNAME, PACKAGE_PRICE AS PRICE, STATUS AS STATUS, AMOUNT AS CALAMOUNT
, TO_CHAR(BOOK_REFUND_DATE,'YYYY-MM-DD') AS REFUNDDATE, TO_CHAR(APPLY_DATE,'YYYY-MM-DD') AS APPLYDATE, TO_CHAR(HOST_CANCEL_DATE,'YYYY-MM-DD') AS HOSTCANCELDATE
FROM CAL_HISTORY C JOIN MEMBER_PROFILE MP
ON C.MEMBER_CODE = MP.MEMBER_CODE
WHERE HOST_CODE = 'H000001';

--② 환전내역
CREATE OR REPLACE VIEW HOST_EXCHANGE_HISTORY
AS
SELECT H.HOST_CODE, HEBIF.HOST_BANK_NUMBER, HBIF.HOST_BANK, HE.HOST_EXCHANGE_AMOUNT, HE.HOST_EXCHANGE_DATE
FROM HOST H RIGHT OUTER JOIN HOST_EXCHANGE_LIST HE
ON H.HOST_CODE = HE.HOST_CODE
    JOIN HOST_EXCHANGE_BANK_INFO HEBIF
    ON HE.HOST_EXCHANGE_CODE = HEBIF.HOST_EXCHANGE_CODE
        JOIN HOST_BANK_INFO HBIF
        ON HEBIF.HOST_BANK_NUMBER = HBIF.HOST_BANK_NUMBER;


-- 환전 내역 조회 쿼리
SELECT HOST_BANK_NUMBER AS BANKNUMBER, HOST_BANK AS BANK, HOST_EXCHANGE_AMOUNT AS AMOUNT, HOST_EXCHANGE_DATE AS EXCHANGEDATE
FROM HOST_EXCHANGE_HISTORY
WHERE HOST_CODE = 'H000001';


--③ 호스트 잔액 조회 
-- 잔액조회 쿼리
SELECT (SELECT NVL(SUM(AMOUNT), 0)
         FROM CAL_HISTORY
         WHERE HOST_CODE = 'H000003')
        -
        (SELECT NVL(SUM(HOST_EXCHANGE_AMOUNT), 0)
         FROM HOST_EXCHANGE_HISTORY
         WHERE HOST_CODE = 'H000003') AS BALANCE
FROM DUAL;         

-- 잔액조회 함수 쿼리
SELECT F_HOST_BALANCE('H000003') AS BALANCE
FROM DUAL;


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- 관리자 충전 처리--

--① 충전신청 리스트 조회 뷰
CREATE OR REPLACE VIEW LOAD_REG_LIST
AS
(SELECT LR.LOAD_REG_CODE, MP.MEMBER_EMAIL, LRBIF.MEMBER_BANK_NUMBER, MBIF.MEMBER_BANK, LR.LOAD_AMOUNT, MBIF.MEMBER_BANK_HOLDER, LR.LOAD_REG_DATE, LT.LOAD_TYPE, LP.LOAD_PROC_DATE
FROM MEMBER M JOIN MEMBER_PROFILE MP
    ON M.MEMBER_CODE = MP.MEMBER_CODE
        RIGHT OUTER JOIN MEMBER_BANK_INFO MBIF
        ON M.MEMBER_CODE = MBIF.MEMBER_CODE
            RIGHT OUTER JOIN LOAD_REG_BANK_INFO LRBIF
            ON MBIF.MEMBER_BANK_NUMBER = LRBIF.MEMBER_BANK_NUMBER
                RIGHT OUTER JOIN LOAD_REG LR
                ON LRBIF.LOAD_REG_CODE = LR.LOAD_REG_CODE
                    LEFT OUTER JOIN LOAD_PROC LP
                    ON LR.LOAD_REG_CODE = LP.LOAD_REG_CODE
                        LEFT OUTER JOIN LOAD_TYPE LT
                        ON LP.LOAD_TYPE_CODE = LT.LOAD_TYPE_CODE);
                        
SELECT LOAD_REG_CODE AS REGCODE, MEMBER_EMAIL AS EMAIL, MEMBER_BANK_NUMBER AS BANKNUMBER, MEMBER_BANK AS BANK
     , MEMBER_BANK_HOLDER AS BANKHOLDER, LOAD_AMOUNT AS AMOUNT, LOAD_REG_DATE AS REGDATE
     , LOAD_TYPE AS LOADTYPE, LOAD_PROC_DATE AS PROCDATE
FROM LOAD_REG_LIST;

-- 충전 승인 처리
INSERT INTO LOAD_PROC(LOAD_PROC_CODE, LOAD_REG_CODE, LOAD_TYPE_CODE, LOAD_PROC_DATE)
VALUES(F_CODE('LP', LP_SEQ.NEXTVAL), 충전신청코드, 'LT000001', SYSDATE);

--충전 반려 처리
INSERT INTO LOAD_PROC(LOAD_PROC_CODE, LOAD_REG_CODE, LOAD_TYPE_CODE, LOAD_PROC_DATE)
VALUES(F_CODE('LP', LP_SEQ.NEXTVAL), 충전신청코드, 'LT000002', SYSDATE);






/*
*locationDetail 3
●
1. 공간테이블에서 예약할 공간의 정보를 조회하는 쿼리문
   1-1. 공간소개 : (이용안내테이블) 영업시간, 정기휴무일, 지정휴무일
   1-2. 시설안내 : (시설안내테이블) 시설안내내용
   1-3. 주의사항 : 주의사항.주의사항 내용
   1-4. 패키지 : 현재 적용된 패키지 종류, 종류에따라 적용된 날짜
2. 해당 공간의 리뷰를 조회하는 쿼리문
   (평점, 리뷰내용, 리뷰작성일자, 닉네임, [회원코드])
   2-1. 이미지가 있는 경우 이미지테이블을 통해 조회
   2-2. 삭제내역이 있는 경우 삭제된 게시물로 안내하는 블라인드 처리
3. 해당 공간의 Q&A를 조회하는 쿼리문
   3-1. 삭제내역이 있는 경우 삭제된 게시물로 안내하는 블라인드 처리	
4. 해당 리뷰의 리뷰답글을 조회하는 쿼리문
   4-1. 삭제내역이 있는 경우 삭제된 게시물로 안내하는 블라인드 처리
5. 해당 Q&A의 Q&A답글을 조회하는 쿼리문 
   5-1. 삭제내역이 있는 경우 삭제된 게시물로 안내하는 블라인드 처리

♥
1. 답글이 존재하는 경우 그 답글이 참조하고 있는 리뷰, Q&A 밑에 올 수 있도록 한다.
2. 지도 API
3. 리뷰, Q&A 목록 생성시 현재 세션의 회원 코드가 같을 경우 수정 및 삭제 버튼을 활성화 시킨다.
4. 리뷰는 한번만 작성이 가능하다. 현재 세션과 같은 회원코드의 리뷰가 존재하는 경우는 
이미 작성한 이력이 있다는 것으로 후기 작성이 불가능하다.  
5. 예약선택에서 날짜를 누르면(패키지 적용된 날짜만 활성화) 해당 날짜에 
있는 패키지들이 라디오 박스 형식으로 보여지고 라디오 버튼을 클릭하면 결제가 가능
*/

SELECT *
FROM LOC_BASIC_INFO;

--○ 기본정보 -- 등록완료된 공간들이 떠야함
SELECT LB.LOC_NAME, LT.LOC_TYPE
, LB.LOC_SHORT_INTRO, LB.LOC_INTRO
, LB.LOC_ADDR, LB.LOC_DETAIL_ADDR
, LD.MIN_PEOPLE, LD.MAX_PEOPLE
, L.LOC_REG_DATE, H.HOST_NICKNAME
FROM LOC_BASIC_INFO LB
JOIN LOC_TYPE LT 
ON LB.LOC_TYPE_CODE = LT.LOC_TYPE_CODE
    JOIN LOC_DETAIL_INFO LD
    ON LB.LOC_CODE = LD.LOC_CODE
        JOIN LOC L
        ON LB.LOC_CODE = L.LOC_CODE
            JOIN HOST_PROFILE H
            ON L.HOST_CODE = H.HOST_CODE;
--> 뷰로 작업
SELECT LOC_NAME, LOC_TYPE, LOC_SHORT_INTRO, LOC_INTRO
, LOC_ADDR, LOC_DETAIL_ADDR, MIN_PEOPLE, MAX_PEOPLE
, LOC_REG_DATE, HOST_NICKNAME, HOST_CODE
FROM VIEW_BASIC_INFO
WHERE LOC_CODE = 'L000001';

SELECT *
FROM LOC;

SELECT *
FROM LOC_DETAIL_INFO;







--○ 공간소개 
SELECT LOC_USE_HOUR, LOC_USE_DAY_OFF, LOC_USE_APPOINT_DAY_OFF
FROM LOC_USE_INFO
WHERE LOC_CODE='L000001';
--> 
SELECT LOC_USE_HOUR, LOC_USE_DAY_OFF, LOC_USE_APPOINT_DAY_OFF, LOC_CODE
FROM VIEW_USING_HOUR
WHERE LOC_CODE='L000001';

--○ 시설안내
SELECT F.FACILITY_CODE, F.LOC_BASIC_INFO_CODE, F.FACILITY_CONTENT
, L.LOC_CODE 
FROM FACILITY_INFO F
JOIN LOC_BASIC_INFO L
ON F.LOC_BASIC_INFO_CODE = L.LOC_BASIC_INFO_CODE
WHERE LOC_CODE='L000001';
--> 뷰
SELECT FACILITY_CONTENT FROM VIEW_FACILITY_INFO WHERE LOC_CODE='L000001'
;


--○ 주의사항
SELECT CAUTION_CONTENT
FROM CAUTION C
JOIN LOC_BASIC_INFO L
ON C.LOC_BASIC_INFO_CODE = L.LOC_BASIC_INFO_CODE
WHERE LOC_CODE='L000001';
--> 뷰
SELECT CAUTION_CONTENT FROM VIEW_CAUTION_CONTENT 
WHERE LOC_CODE='L000001'
;




--○ 해당 공간에 적용된 패키지 
SELECT PF.LOC_CODE, P.PACKAGE_CODE, P.PACKAGE_FORM_CODE, P.PACKAGE_NAME
, P.PACKAGE_START, P.PACKAGE_END, P.PACKAGE_PRICE, AP.APPLY_DATE
FROM PACKAGE P
JOIN PACKAGE_FORM PF
ON P.PACKAGE_FORM_CODE = PF.PACKAGE_FORM_CODE
    JOIN APPLY_PACKAGE AP
    ON P.PACKAGE_CODE = AP.PACKAGE_CODE;
WHERE PF.LOC_CODE = 'L000001' AND APPLY_DATE='2021-01-02';
--> 뷰 생성

SELECT LOC_CODE, PACKAGE_NAME, PACKAGE_START, PACKAGE_END, PACKAGE_PRICE, APPLY_DATE FROM VIEW_APPLY_PACKAGE_INFO WHERE LOC_CODE = 'L000001' AND APPLY_DATE='2021-01-02'
;


SELECT *
FROM APPLY_PACKAGE;


UPDATE APPLY_PACKAGE
SET APPLY_DATE=TO_DATE('2021-01-18', 'YYYY-MM-DD')
WHERE APPLY_DATE='2021-01-02';

COMMIT;


--○ 사업자정보
SELECT BIZ_NAME, BIZ_CEO, BIZ_CEO_TYPE,
BIZ_MAIN_TYPE, BIZ_SUB_TYPE, BIZ_LICENSE_NUMBER
FROM BIZ_INFO B
WHERE LOC_CODE='L000001';
    



--○ QNA 조회
SELECT Q.LOC_CODE, Q.QNA_CODE, Q.MEMBER_CODE, Q.QNA_CONTENT, Q.QNA_DATE
, NVL(M.MEMBER_NICKNAME, '(알수없음)') AS MEMBER_NICKNAME
, (SELECT COUNT(*) FROM QNA_REPLY QR WHERE Q.QNA_CODE=QR.QNA_CODE) AS REPLYCOUNT
, (SELECT COUNT(*) FROM QNA_REMOVE QRM WHERE Q.QNA_CODE=QRM.QNA_CODE) AS QNAREMOVECOUNT
, (SELECT COUNT(*) FROM QNA_REPLY_REMOVE QRM WHERE QR.QNA_REPLY_CODE=QRM.QNA_REPLY_CODE) AS QNAREPLYREMOVECOUNT
, L.HOST_CODE, QR.QNA_REPLY_CONTENT, QR.QNA_REPLY_DATE, L.HOST_CODE, QR.QNA_REPLY_CODE
FROM QNA Q
LEFT JOIN MEMBER_PROFILE M      -- LEFT 조인 해야 탈퇴회원이름 표시가능
ON Q.MEMBER_CODE = M.MEMBER_CODE
    LEFT JOIN QNA_REPLY QR
    ON Q.QNA_CODE = QR.QNA_CODE
        JOIN LOC L
        ON Q.LOC_CODE = L.LOC_CODE;
--> 뷰 만들기
SELECT QNA_CODE, MEMBER_NICKNAME, QNA_CONTENT, QNA_DATE, MEMBER_CODE, REPLYCOUNT
, QNAREMOVECOUNT, QNAREPLYREMOVECOUNT
, HOST_CODE, QNA_REPLY_CONTENT, QNA_REPLY_DATE, QNA_REPLY_CODE
FROM VIEW_QNA
WHERE LOC_CODE='L000001';


--○ 해당 공간의 q&a 갯수
SELECT COUNT(*) AS COUNT FROM VIEW_QNA WHERE LOC_CODE='L000001'
;


--○ QNA 답글 조회
SELECT QNA_REPLY_CONTENT, QNA_REPLY_DATE
FROM QNA_REPLY QR;

--○ 리뷰 조회
SELECT R.REVIEW_CODE, NVL(M.MEMBER_NICKNAME, '(알수없음)') AS MEMBER_NICKNAME
, R.LOC_CODE, R.REVIEW_RATE, R.REVIEW_CONTENT, R.REVIEW_DATE
, RVIMG.REVIEW_IMG_URL
, (SELECT COUNT(*) FROM REVIEW_IMG RVIMG
    WHERE R.REVIEW_CODE=RVIMG.REVIEW_CODE) AS RVIMGCOUNT
, (SELECT COUNT(*) FROM REVIEW_REMOVE RVRM 
    WHERE R.REVIEW_CODE=RVRM.REVIEW_CODE) AS REVIEWREMOVECOUNT
, (SELECT COUNT(*) FROM REVIEW_REPLY RR 
    WHERE R.REVIEW_CODE=RR.REVIEW_CODE) AS REPLYCOUNT
, (SELECT COUNT(*) FROM REVIEW_REPLY_REMOVE RRM 
    WHERE RR.REVIEW_REPLY_CODE=RRM.REVIEW_REPLY_CODE) AS REPLYREMOVECOUNT
, M.MEMBER_CODE, RR.REVIEW_REPLY_CONTENT, RR.REVIEW_REPLY_DATE, L.HOST_CODE
, RR.REVIEW_REPLY_CODE
FROM REVIEW R
LEFT JOIN MEMBER_PROFILE M
ON R.MEMBER_CODE = M.MEMBER_CODE
    LEFT JOIN REVIEW_IMG RVIMG
    ON R.REVIEW_CODE = RVIMG.REVIEW_CODE
        LEFT JOIN REVIEW_REPLY RR
        ON R.REVIEW_CODE = RR.REVIEW_CODE
            JOIN LOC L
            ON R.LOC_CODE = L.LOC_CODE
ORDER BY R.REVIEW_DATE DESC;
-->뷰
SELECT REVIEW_CODE, MEMBER_NICKNAME, REVIEW_RATE, REVIEW_CONTENT, REVIEW_DATE
, REVIEW_IMG_URL, RVIMGCOUNT, REVIEWREMOVECOUNT, REPLYCOUNT, REPLYREMOVECOUNT
, MEMBER_CODE, REVIEW_REPLY_CONTENT, REVIEW_REPLY_DATE, HOST_CODE, REVIEW_REPLY_CODE
FROM VIEW_REVIEW WHERE LOC_CODE='L000003'
;


--○ 해당 공간의 리뷰 갯수
SELECT * FROM VIEW_REVIEW WHERE LOC_CODE='L000001'
;

--○ 이용자 : QnA 작성
INSERT INTO QNA(QNA_CODE, LOC_CODE, MEMBER_CODE, QNA_CONTENT, QNA_DATE)
VALUES(F_CODE('Q', Q_SEQ.NEXTVAL), 'L000001' ,'M000001', '입력받은 내용 넘기기', SYSDATE)
;

--○ 이용자 : QnA 수정할 내용 가져오기
SELECT QNA_CODE, LOC_CODE, QNA_CONTENT
FROM QNA
WHERE QNA_CODE='Q000024';


--○ 이용자 : QnA 수정
UPDATE QNA SET QNA_CONTENT = '수정한 콘텐츠입니다.', QNA_DATE=SYSDATE WHERE QNA_CODE = 'Q000001';
;

--○ 이용자 : QnA 삭제
INSERT INTO QNA_REMOVE (QNA_REMOVE_CODE, QNA_CODE, QNA_REMOVE_DATE) VALUES(F_CODE('QRM', QRM_SEQ.NEXTVAL), 'Q000001', SYSDATE)
;

--○ 이용자 이용내역여부 확인(후기작성 버튼 출력여부)
SELECT B.MEMBER_CODE, A.APPLY_PACKAGE_CODE, F.LOC_CODE
, A.APPLY_DATE
FROM BOOK_LIST B
JOIN APPLY_PACKAGE A
ON B.APPLY_PACKAGE_CODE = A.APPLY_PACKAGE_CODE
    JOIN PACKAGE P
    ON A.PACKAGE_CODE = P.PACKAGE_CODE
        JOIN PACKAGE_FORM F
        ON P.PACKAGE_FORM_CODE = F.PACKAGE_FORM_CODE
WHERE NOT EXISTS (SELECT MCL.BOOK_CODE FROM MEMBER_CANCEL_LIST MCL);
-- 뷰 확인
SELECT COUNT(*) AS COUNT
FROM VIEW_MEMBER_BOOK
WHERE MEMBER_CODE='M000001';

SELECT BOOK_CODE
FROM MEMBER_CANCEL_LIST;


-- 1. 해당 공간에 대해 취소되지 않은 예약 횟수가... 1 이상이고 
-- 2. 해당 공간에 대해 작성한 리뷰개수가 예약횟수보다 작으면...!





SELECT *
FROM REVIEW;

--○ 이용자 : 리뷰 작성
INSERT INTO REVIEW(REVIEW_CODE, LOC_CODE, MEMBER_CODE, REVIEW_RATE, REVIEW_CONTENT, REVIEW_DATE)
VALUES(F_CODE('RV', RV_SEQ.NEXTVAL), 'L000003', 'M000005', 3, '데이터베이스로 리뷰를 써봅니다... 우하하', SYSDATE);


--○ 이용자 : 리뷰 수정폼 내용 가져오기
SELECT REVIEW_CODE, LOC_CODE, REVIEW_CONTENT, REVIEW_RATE
FROM REVIEW
WHERE REVIEW_CODE='RV000001';

--○ 이용자 : 리뷰 수정
UPDATE REVIEW
SET REVIEW_RATE=4, REVIEW_CONTENT='이렇게', REVIEW_DATE=SYSDATE
WHERE REVIEW_CODE = 'RV000001';

--○ 이용자 : 리뷰 삭제
INSERT INTO REVIEW_REMOVE(REVIEW_REMOVE_CODE, REVIEW_CODE, REVIEW_REMOVE_DATE)
VALUES(F_CODE('RVRM', RV_SEQ.NEXTVAL), 'RV000010', SYSDATE);


--○ 호스트 : 리뷰 답글 작성
INSERT INTO REVIEW_REPLY (REVIEW_REPLY_CODE, REVIEW_CODE, REVIEW_REPLY_CONTENT, REVIEW_REPLY_DATE)
VALUES(F_CODE('RVRE', RVRE_SEQ.NEXTVAL), 'RV000006', '컨텐츠', SYSDATE);

--○ 호스트 : 리뷰 수정폼 불러오기
SELECT REVIEW_REPLY_CODE, REVIEW_REPLY_CONTENT
FROM REVIEW_REPLY
WHERE REVIEW_REPLY_CODE='RVRE000001';

--○ 호스트 : 리뷰 답글 수정
UPDATE REVIEW_REPLY
SET REVIEW_REPLY_CONTENT='이렇게', REVIEW_REPLY_DATE=SYSDATE
WHERE REVIEW_REPLY_CODE='RVRE000001';


--○ 호스트 : 리뷰답글 삭제시
INSERT INTO REVIEW_REPLY_REMOVE (REVIEW_REPLY_REMOVE_CODE, REVIEW_REPLY_CODE, REVIEW_REPLY_REMOVE_DATE)
VALUES(F_CODE('RVRERM', RVRERM_SEQ.NEXTVAL), 'RVRE000004', SYSDATE);


--○ 호스트 : QNA 답글 작성
INSERT INTO QNA_REPLY (QNA_REPLY_CODE, QNA_CODE, QNA_REPLY_CONTENT, QNA_REPLY_DATE)
VALUES(F_CODE('QRE', QRE_SEQ.NEXTVAL), 'Q000001', '답글 답니다.', SYSDATE);


--○ 호스트 : QNA 수정폼 불러오기
SELECT QNA_REPLY_CODE, QNA_REPLY_CONTENT
FROM QNA_REPLY
WHERE QNA_REPLY_CODE ='QRE000001';

--○ 호스트 : QNA 답글 수정
UPDATE QNA_REPLY
SET QNA_REPLY_CONTENT='안녕', QNA_REPLY_DATE=SYSDATE
WHERE QNA_REPLY_CODE='QRE000001';


--○ 호스트 : QNA 답글 삭제
INSERT INTO QNA_REPLY_REMOVE(QNA_REPLY_REMOVE_CODE, QNA_REPLY_CODE, QNA_REPLY_REMOVE_DATE)
VALUES(F_CODE('QRERM', QRERM_SEQ.NEXTVAL), 'QRE000001', SYSDATE); 


--○ 리뷰 평균 별점 구하기
SELECT ROUND(AVG(NVL(REVIEW_RATE, 0)), 2) AS AVGSTAR
FROM REVIEW
WHERE LOC_CODE='L000007';

SELECT *
FROM REVIEW;

-- ○ 리뷰 이미지 작성 및 수정...
------------------------------------------------------------------------------------------------○ DELETEMEMBER
/*
deleteAccount(호스트, 이용자 동일) 1

이용자
0. 프로필정보에서 회원코드 확인
1. 예약내역 남아있으면 탈퇴 불가
2. / 마일리지 남아있으면 탈퇴 불가능
3. 환전계좌 테이블에서 해당 계좌번호로 이루어진 것들 삭제
4. 충전신청계좌에서 해당계좌번호로 이루어진것들 
   찾아서 삭제
5. 계좌번호 테이블에서 계좌 삭제
6. 프로필정보에서 회원코드 찾아 삭제
7. 탈퇴회원 테이블 insert
*/

--※ 이용자 삭제 순서 
-- ○ 프로필정보에서 회원코드 확인
SELECT MEMBER_CODE
FROM MEMBER_PROFILE
WHERE MEMBER_NICKNAME='김감자';
-->
SELECT MEMBER_CODE FROM MEMBER_PROFILE WHERE MEMBER_NICKNAME='김감자'
;
SELECT * FROM MEMBER_BANK_INFO;

--○ 멤버프로필 테이블에 있는지 확인 → 없으면 등록하지 않은 멤버
SELECT COUNT(*) AS COUNT
FROM MEMBER_PROFILE
WHERE MEMBER_CODE = 'M000009';
-->
SELECT COUNT(*) AS COUNT FROM MEMBER_PROFILE WHERE MEMBER_CODE = 'M000009'
;

--○ 예약내역 있는지 확인 
SELECT B.BOOK_CODE, B.MEMBER_CODE, AP.APPLY_PACKAGE_CODE, AP.APPLY_DATE
, P.PACKAGE_CODE, PF.LOC_CODE
FROM BOOK_LIST B
JOIN APPLY_PACKAGE AP
ON B.APPLY_PACKAGE_CODE = AP.APPLY_PACKAGE_CODE
JOIN PACKAGE P
ON AP.PACKAGE_CODE = P.PACKAGE_CODE
JOIN PACKAGE_FORM PF
ON P.PACKAGE_FORM_CODE = PF.PACKAGE_FORM_CODE
WHERE AP.APPLY_DATE > SYSDATE AND B.MEMBER_CODE='M000002';
-->
SELECT COUNT(*) AS COUNT FROM BOOK_LIST B JOIN APPLY_PACKAGE AP ON B.APPLY_PACKAGE_CODE = AP.APPLY_PACKAGE_CODE JOIN PACKAGE P ON AP.PACKAGE_CODE = P.PACKAGE_CODE JOIN PACKAGE_FORM PF ON P.PACKAGE_FORM_CODE = PF.PACKAGE_FORM_CODE WHERE AP.APPLY_DATE > SYSDATE AND B.MEMBER_CODE='M000002'
;


--------------------------------------------------------------------- 마일리지
--○ 마일리지 내역 확인 방법 
-- 충전처리내역(처리된것만) 조인 / 충전처리코드 LOAD_TYPE_CODE='LT000001'
-- - 예약결제내역 차감
-- + 이용자가 취소한 예약 환불 내역
-- + 호스트가 취소한 예약 환불 내역
-- - 이용자 환전 금액
-------------------------------------------


-- 마일리지 충전 내역
SELECT NVL(SUM(LR.LOAD_AMOUNT), 0)
FROM LOAD_PROC LP
JOIN LOAD_REG LR
ON LP.LOAD_REG_CODE = LR.LOAD_REG_CODE
WHERE LP.LOAD_TYPE_CODE='LT000001' AND LR.MEMBER_CODE='M000003';

-- 예약 결제 내역
SELECT NVL(SUM(P.PACKAGE_PRICE), 0)
FROM BOOK_PAY_LIST BP
JOIN BOOK_LIST B
ON BP.BOOK_CODE = B.BOOK_CODE
JOIN APPLY_PACKAGE AP
ON B.APPLY_PACKAGE_CODE = AP.APPLY_PACKAGE_CODE
JOIN PACKAGE P 
ON AP.PACKAGE_CODE = P.PACKAGE_CODE
WHERE B.MEMBER_CODE='M000002';

          
-- 호스트가 취소한 예약의 경우        
SELECT NVL(SUM(P.PACKAGE_PRICE), 0) AS HOST_CANCEL
FROM HOST_CANCEL_LIST HC
JOIN BOOK_REFUND_LIST BR
ON HC.BOOK_CODE = BR.BOOK_CODE
    JOIN BOOK_LIST B
    ON BR.BOOK_CODE = B.BOOK_CODE
        JOIN APPLY_PACKAGE AP
        ON B.APPLY_PACKAGE_CODE = AP.APPLY_PACKAGE_CODE
            JOIN PACKAGE P
            ON AP.PACKAGE_CODE = P.PACKAGE_CODE
            WHERE B.MEMBER_CODE = 'M000002';

-- 이용자가 취소한 예약의 경우
-- 이용자 취소시 7일전 - 100% 환불, 6~1일전 - 50% 환불
SELECT NVL(SUM
(CASE WHEN (TO_DATE(AP.APPLY_DATE, 'YYYY-MM-DD') - TO_DATE(MC.MEMBER_CANCEL_DATE, 'YYYY-MM-DD')) < 7 
      THEN TRUNC(P.PACKAGE_PRICE * 0.5, -1) -- 이용자 취소일자가 패키지 적용일 6일 전일 경우 50프로
      ELSE TRUNC(P.PACKAGE_PRICE * 1, -1)   -- 아닐경우 100프로 환불, 나머지 예외상황은 웹에서 처리
      END), 0) AS MEMBER_CANCEL
FROM MEMBER_CANCEL_LIST MC
JOIN BOOK_REFUND_LIST BR
ON MC.BOOK_CODE = BR.BOOK_CODE
    JOIN BOOK_LIST B
    ON BR.BOOK_CODE = B.BOOK_CODE
        JOIN APPLY_PACKAGE AP
        ON B.APPLY_PACKAGE_CODE = AP.APPLY_PACKAGE_CODE
            JOIN PACKAGE P
            ON AP.PACKAGE_CODE = P.PACKAGE_CODE;
            --WHERE B.MEMBER_CODE = 'M000002';

-- 이용자가 환전한 금액
SELECT NVL(SUM(MEMBER_EXCHANGE_AMOUNT), 0)
FROM MEMBER_EXCHANGE_LIST
WHERE MEMBER_CODE = 'M000002';

--○ 마일리지 프로시저
VARIABLE V_CHANGE NUMBER;

CALL PRC_MEMBER_MILEAGE('M000005', :V_CHANGE);

-- 계좌정보 있는지 확인 (MEMBER_BANK_INFO)
SELECT MEMBER_BANK_NUMBER
FROM MEMBER_BANK_INFO
WHERE MEMBER_CODE='M000003';
--> 
SELECT MEMBER_BANK_NUMBER, MEMBER_CODE FROM MEMBER_BANK_INFO WHERE MEMBER_CODE='M000001'
;

--○ MEMBER_EXCHANGE_BANK_INFO에서 계좌정보 삭제 
DELETE MEMBER_EXCHANGE_BANK_INFO
WHERE MEMBER_BANK_NUMBER 
IN ( SELECT MEMBER_BANK_NUMBER
     FROM MEMBER_BANK_INFO
     WHERE MEMBER_CODE='M000003');
--> 
DELETE MEMBER_EXCHANGE_BANK_INFO WHERE MEMBER_BANK_NUMBER IN ( SELECT MEMBER_BANK_NUMBER FROM MEMBER_BANK_INFO WHERE MEMBER_CODE='M000003')
;

--○ 충전신청계좌에서 해당계좌번호로 이루어진것들 찾아서 삭제
DELETE LOAD_REG_BANK_INFO
WHERE MEMBER_BANK_NUMBER
IN ( SELECT MEMBER_BANK_NUMBER
     FROM MEMBER_BANK_INFO
     WHERE MEMBER_CODE='M000003');
-->
DELETE LOAD_REG_BANK_INFO WHERE MEMBER_BANK_NUMBER IN ( SELECT MEMBER_BANK_NUMBER FROM MEMBER_BANK_INFO WHERE MEMBER_CODE='M000003')
;

--○ 멤버계좌정보에서 해당계좌번호 찾아 삭제
DELETE FROM MEMBER_BANK_INFO WHERE MEMBER_CODE='M000003';

--○ 멤버프로필에서 해당멤버 삭제
DELETE FROM MEMBER_PROFILE WHERE MEMBER_CODE='M000003';

--○ 탈퇴 테이블 INSERT 
INSERT INTO MEMBER_WITHDRAW(MEMBER_WITHDRAW_CODE, MEMBER_CODE, MEMBER_WITHDRAW_DATE) 
VALUES(F_CODE('MW', MW_SEQ.NEXTVAL), 'M000003' ,SYSDATE);
;
--> 한줄
INSERT INTO MEMBER_WITHDRAW(MEMBER_WITHDRAW_CODE, MEMBER_CODE, MEMBER_WITHDRAW_DATE) VALUES(F_CODE('MW', MW_SEQ.NEXTVAL), 'M000003',SYSDATE)
;

----------------------------------------------------------------------------------------------
--○ DELETEHOST

/*
호스트

0. 프로필정보에서 회원코드 확인
1. 예약내역 있으면 탈퇴 불가능
2. 마일리지 남아있으면 탈퇴 불가능 
3. LOC_CONTACT에서 연락처 삭제
4. BIZ_INFO에서 사업자정보 삭제
5. LOC_REMOVE(LRM)에 삭제된 공간으로 INSERT
6. 환전계좌에서 해당 계좌정보 DELETE
7. HOST_BANK_INFO에서 해당 회원코드의 계좌정보 DELETE
8. HOST_PROFILE에서 해당 회원코드인 회원정보 DELETE
9. HOST_WITHDRAW(HW) 에 해당 회원코드 회원 INSERT

*/

--★ 호스트 삭제 순서

--○ 해당 공간의 예약내역 확인
SELECT B.BOOK_CODE, AP.APPLY_PACKAGE_CODE, AP.APPLY_DATE
, P.PACKAGE_CODE, PF.LOC_CODE, L.HOST_CODE
FROM BOOK_LIST B
JOIN APPLY_PACKAGE AP
ON B.APPLY_PACKAGE_CODE = AP.APPLY_PACKAGE_CODE
JOIN PACKAGE P
ON AP.PACKAGE_CODE = P.PACKAGE_CODE
JOIN PACKAGE_FORM PF
ON P.PACKAGE_FORM_CODE = PF.PACKAGE_FORM_CODE
JOIN LOC L
ON PF.LOC_CODE = L.LOC_CODE
WHERE AP.APPLY_DATE > SYSDATE AND L.HOST_CODE='H000003';
-->
SELECT COUNT(*) AS COUNT FROM BOOK_LIST B JOIN APPLY_PACKAGE AP ON B.APPLY_PACKAGE_CODE = AP.APPLY_PACKAGE_CODE JOIN PACKAGE P ON AP.PACKAGE_CODE = P.PACKAGE_CODE JOIN PACKAGE_FORM PF ON P.PACKAGE_FORM_CODE = PF.PACKAGE_FORM_CODE JOIN LOC L ON PF.LOC_CODE = L.LOC_CODE WHERE AP.APPLY_DATE > SYSDATE AND L.HOST_CODE='H000001'
;

-- 마일리지 내역 확인
/*
이용자가 예약을 취소할 경우, 해당 퍼센트만큼 차감된 가격이
호스트에게 들어온다. [정산 내역 테이블은 그 퍼센트를 이미 차감한 금액임.] 

------------------------------
    정산 내역(호스트)           CAL 테이블 
-   마일리지 환전 내역(호스트)  HOST_EXCHANGE_LIST 테이블 HE
-----------------------------------
*/

-- 호스트 정산 내역에서 가격 가져오기
SELECT NVL(SUM(P.PACKAGE_PRICE), 0) AS PACKAGE_PRICE
FROM CAL C 
JOIN BOOK_LIST B
ON C.BOOK_CODE = B.BOOK_CODE
JOIN APPLY_PACKAGE AP
ON B.APPLY_PACKAGE_CODE = AP.APPLY_PACKAGE_CODE
JOIN PACKAGE P
ON AP.PACKAGE_CODE = P.PACKAGE_CODE
WHERE HOST_CODE='H000001';


-- 환전 내역 
SELECT NVL(SUM(HOST_EXCHANGE_AMOUNT), 0) AS HOST_EXCHANGE_AMOUNT
FROM HOST_EXCHANGE_LIST
WHERE HOST_CODE='H000001';

--○ 호스트 마일리지 잔액 구하기
SELECT
(SELECT NVL(SUM(P.PACKAGE_PRICE), 0)
FROM CAL C 
JOIN BOOK_LIST B
ON C.BOOK_CODE = B.BOOK_CODE
JOIN APPLY_PACKAGE AP
ON B.APPLY_PACKAGE_CODE = AP.APPLY_PACKAGE_CODE
JOIN PACKAGE P
ON AP.PACKAGE_CODE = P.PACKAGE_CODE
WHERE HOST_CODE='H000003'
)
-
(SELECT NVL(SUM(HOST_EXCHANGE_AMOUNT), 0)
FROM HOST_EXCHANGE_LIST
WHERE HOST_CODE='H000003'
) AS MILEAGE
FROM DUAL;

--○ 멤버프로필 테이블에 있는지 확인 → 없으면 등록하지 않은 멤버
SELECT COUNT(*) AS COUNT
FROM HOST_PROFILE
WHERE HOST_CODE = 'H000009';
-->
SELECT COUNT(*) AS COUNT FROM HOST_PROFILE WHERE HOST_CODE = 'H000009'
;

-- !! 여러개] LOC 테이블에서 해당 회원코드의 공간코드 찾기
SELECT LOC_CODE
FROM LOC
WHERE HOST_CODE = 'H000006';
-->
SELECT LOC_CODE FROM LOC WHERE HOST_CODE = 'H000004'
;

--○ 받아온 공간코드들로 LOC_CONTACT에서 연락처 삭제
DELETE LOC_CONTACT WHERE LOC_CODE IN (SELECT LOC_CODE FROM LOC WHERE HOST_CODE = 'H000004')
;

--○ 받아온 공간코드들로 BIZ_INFO에서 사업자정보 삭제
DELETE BIZ_INFO WHERE LOC_CODE IN (SELECT LOC_CODE FROM LOC WHERE HOST_CODE = 'H000004')
;

--○ LOC_REMOVE(LRM)에 삭제된 공간으로 INSERT (여러번 해줘야함 )
CALL PRC_DEL_LOC_INSERT('H000006')
;
--INSERT INTO LOC_REMOVE(LOC_REMOVE_CODE, LOC_CODE, LOC_REMOVE_DATE)
--VALUES(F_CODE('LRM', LRM_SEQ.NEXTVAL), 'L000001', SYSDATE);


-- !! 여러개] 계좌정보 있는지 확인 (HOST_BANK_INFO)
SELECT HOST_BANK_NUMBER, HOST_CODE
FROM HOST_BANK_INFO
WHERE HOST_CODE='H000004';
--> 
SELECT HOST_BANK_NUMBER FROM HOST_BANK_INFO WHERE HOST_CODE='H000004'
;
-- 여기서 HOST_BANK_NUMBER 받아옴

--○ 환전계좌에서 해당 계좌정보 DELETE
DELETE 
FROM HOST_EXCHANGE_BANK_INFO
WHERE HOST_BANK_NUMBER IN (SELECT HOST_BANK_NUMBER FROM HOST_BANK_INFO WHERE HOST_CODE='H000001');
-->
DELETE FROM HOST_EXCHANGE_BANK_INFO WHERE HOST_BANK_NUMBER IN (SELECT HOST_BANK_NUMBER FROM HOST_BANK_INFO WHERE HOST_CODE='H000001')
;

--○ HOST_BANK_INFO에서 계좌번호 삭제
DELETE FROM HOST_BANK_INFO WHERE HOST_CODE='H000004';

--○ HOST_PROFILE에서 호스트번호 삭제 
DELETE FROM HOST_PROFILE WHERE HOST_CODE='H000004';

--○ 탈퇴 테이블 INSERT 
INSERT INTO HOST_WITHDRAW(HOST_WITHDRAW_CODE, HOST_CODE, HOST_WITHDRAW_DATE) 
VALUES(F_CODE('HW', HW_SEQ.NEXTVAL), 'H000002' ,SYSDATE);
--> 한줄
INSERT INTO HOST_WITHDRAW(HOST_WITHDRAW_CODE, HOST_CODE, HOST_WITHDRAW_DATE) VALUES(F_CODE('HW', HW_SEQ.NEXTVAL), 'H000002' ,SYSDATE)
;

----------------------------------------------------------------------------------------------
/*
*locationDetail 3
●
1. 공간테이블에서 예약할 공간의 정보를 조회하는 쿼리문
   1-1. 공간소개 : (이용안내테이블) 영업시간, 정기휴무일, 지정휴무일
   1-2. 시설안내 : (시설안내테이블) 시설안내내용
   1-3. 주의사항 : 주의사항.주의사항 내용
   1-4. 패키지 : 현재 적용된 패키지 종류, 종류에따라 적용된 날짜
2. 해당 공간의 리뷰를 조회하는 쿼리문
   (평점, 리뷰내용, 리뷰작성일자, 닉네임, [회원코드])
   2-1. 이미지가 있는 경우 이미지테이블을 통해 조회
   2-2. 삭제내역이 있는 경우 삭제된 게시물로 안내하는 블라인드 처리
3. 해당 공간의 Q&A를 조회하는 쿼리문
   3-1. 삭제내역이 있는 경우 삭제된 게시물로 안내하는 블라인드 처리	
4. 해당 리뷰의 리뷰답글을 조회하는 쿼리문
   4-1. 삭제내역이 있는 경우 삭제된 게시물로 안내하는 블라인드 처리
5. 해당 Q&A의 Q&A답글을 조회하는 쿼리문 
   5-1. 삭제내역이 있는 경우 삭제된 게시물로 안내하는 블라인드 처리

♥
1. 답글이 존재하는 경우 그 답글이 참조하고 있는 리뷰, Q&A 밑에 올 수 있도록 한다.
2. 지도 API
3. 리뷰, Q&A 목록 생성시 현재 세션의 회원 코드가 같을 경우 수정 및 삭제 버튼을 활성화 시킨다.
4. 리뷰는 한번만 작성이 가능하다. 현재 세션과 같은 회원코드의 리뷰가 존재하는 경우는 
이미 작성한 이력이 있다는 것으로 후기 작성이 불가능하다.  
5. 예약선택에서 날짜를 누르면(패키지 적용된 날짜만 활성화) 해당 날짜에 
있는 패키지들이 라디오 박스 형식으로 보여지고 라디오 버튼을 클릭하면 결제가 가능
*/

SELECT *
FROM LOC_BASIC_INFO;

--○ 기본정보 -- 등록완료된 공간들이 떠야함
SELECT LB.LOC_NAME, LT.LOC_TYPE
, LB.LOC_SHORT_INTRO, LB.LOC_INTRO
, LB.LOC_ADDR, LB.LOC_DETAIL_ADDR
, LD.MIN_PEOPLE, LD.MAX_PEOPLE
, L.LOC_REG_DATE, H.HOST_NICKNAME
FROM LOC_BASIC_INFO LB
JOIN LOC_TYPE LT 
ON LB.LOC_TYPE_CODE = LT.LOC_TYPE_CODE
    JOIN LOC_DETAIL_INFO LD
    ON LB.LOC_CODE = LD.LOC_CODE
        JOIN LOC L
        ON LB.LOC_CODE = L.LOC_CODE
            JOIN HOST_PROFILE H
            ON L.HOST_CODE = H.HOST_CODE;
--> 뷰로 작업
SELECT LOC_NAME, LOC_TYPE, LOC_SHORT_INTRO, LOC_INTRO
, LOC_ADDR, LOC_DETAIL_ADDR, MIN_PEOPLE, MAX_PEOPLE
, LOC_REG_DATE, HOST_NICKNAME, HOST_CODE
FROM VIEW_BASIC_INFO
WHERE LOC_CODE = 'L000001';

SELECT *
FROM LOC;

SELECT *
FROM LOC_DETAIL_INFO;







--○ 공간소개 
SELECT LOC_USE_HOUR, LOC_USE_DAY_OFF, LOC_USE_APPOINT_DAY_OFF
FROM LOC_USE_INFO
WHERE LOC_CODE='L000001';
--> 
SELECT LOC_USE_HOUR, LOC_USE_DAY_OFF, LOC_USE_APPOINT_DAY_OFF, LOC_CODE
FROM VIEW_USING_HOUR
WHERE LOC_CODE='L000001';

--○ 시설안내
SELECT F.FACILITY_CODE, F.LOC_BASIC_INFO_CODE, F.FACILITY_CONTENT
, L.LOC_CODE 
FROM FACILITY_INFO F
JOIN LOC_BASIC_INFO L
ON F.LOC_BASIC_INFO_CODE = L.LOC_BASIC_INFO_CODE
WHERE LOC_CODE='L000001';
--> 뷰
SELECT FACILITY_CONTENT FROM VIEW_FACILITY_INFO WHERE LOC_CODE='L000001'
;


--○ 주의사항
SELECT CAUTION_CONTENT
FROM CAUTION C
JOIN LOC_BASIC_INFO L
ON C.LOC_BASIC_INFO_CODE = L.LOC_BASIC_INFO_CODE
WHERE LOC_CODE='L000001';
--> 뷰
SELECT CAUTION_CONTENT FROM VIEW_CAUTION_CONTENT 
WHERE LOC_CODE='L000001'
;

--○ 해당 공간에 적용된 패키지 
--> 뷰 생성
SELECT LOC_CODE, PACKAGE_NAME, PACKAGE_START, PACKAGE_END
, PACKAGE_PRICE, APPLY_DATE, APPLY_PACKAGE_CODE
, COUNT
FROM VIEW_APPLY_PACKAGE_INFO;
WHERE LOC_CODE = 'L000006' AND APPLY_DATE='2021-02-02' AND COUNT=0;

--○ 사업자정보
SELECT BIZ_NAME, BIZ_CEO, BIZ_CEO_TYPE,
BIZ_MAIN_TYPE, BIZ_SUB_TYPE, BIZ_LICENSE_NUMBER
FROM BIZ_INFO B
WHERE LOC_CODE='L000001';
    



--○ QNA 조회
SELECT Q.LOC_CODE, Q.QNA_CODE, Q.MEMBER_CODE, Q.QNA_CONTENT, Q.QNA_DATE
, NVL(M.MEMBER_NICKNAME, '(알수없음)') AS MEMBER_NICKNAME
, (SELECT COUNT(*) FROM QNA_REPLY QR WHERE Q.QNA_CODE=QR.QNA_CODE) AS REPLYCOUNT
, (SELECT COUNT(*) FROM QNA_REMOVE QRM WHERE Q.QNA_CODE=QRM.QNA_CODE) AS QNAREMOVECOUNT
, (SELECT COUNT(*) FROM QNA_REPLY_REMOVE QRM WHERE QR.QNA_REPLY_CODE=QRM.QNA_REPLY_CODE) AS QNAREPLYREMOVECOUNT
, L.HOST_CODE, QR.QNA_REPLY_CONTENT, QR.QNA_REPLY_DATE, L.HOST_CODE, QR.QNA_REPLY_CODE
FROM QNA Q
LEFT JOIN MEMBER_PROFILE M      -- LEFT 조인 해야 탈퇴회원이름 표시가능
ON Q.MEMBER_CODE = M.MEMBER_CODE
    LEFT JOIN QNA_REPLY QR
    ON Q.QNA_CODE = QR.QNA_CODE
        JOIN LOC L
        ON Q.LOC_CODE = L.LOC_CODE;
--> 뷰 만들기
SELECT QNA_CODE, MEMBER_NICKNAME, QNA_CONTENT, QNA_DATE, MEMBER_CODE, REPLYCOUNT
, QNAREMOVECOUNT, QNAREPLYREMOVECOUNT
, HOST_CODE, QNA_REPLY_CONTENT, QNA_REPLY_DATE, QNA_REPLY_CODE
FROM VIEW_QNA
WHERE LOC_CODE='L000001';


--○ 해당 공간의 q&a 갯수
SELECT COUNT(*) AS COUNT FROM VIEW_QNA WHERE LOC_CODE='L000001'
;


--○ QNA 답글 조회
SELECT QNA_REPLY_CONTENT, QNA_REPLY_DATE
FROM QNA_REPLY QR;

--○ 리뷰 조회
SELECT R.REVIEW_CODE, NVL(M.MEMBER_NICKNAME, '(알수없음)') AS MEMBER_NICKNAME
, R.LOC_CODE, R.REVIEW_RATE, R.REVIEW_CONTENT, R.REVIEW_DATE
, RVIMG.REVIEW_IMG_URL
, (SELECT COUNT(*) FROM REVIEW_IMG RVIMG
    WHERE R.REVIEW_CODE=RVIMG.REVIEW_CODE) AS RVIMGCOUNT
, (SELECT COUNT(*) FROM REVIEW_REMOVE RVRM 
    WHERE R.REVIEW_CODE=RVRM.REVIEW_CODE) AS REVIEWREMOVECOUNT
, (SELECT COUNT(*) FROM REVIEW_REPLY RR 
    WHERE R.REVIEW_CODE=RR.REVIEW_CODE) AS REPLYCOUNT
, (SELECT COUNT(*) FROM REVIEW_REPLY_REMOVE RRM 
    WHERE RR.REVIEW_REPLY_CODE=RRM.REVIEW_REPLY_CODE) AS REPLYREMOVECOUNT
, M.MEMBER_CODE, RR.REVIEW_REPLY_CONTENT, RR.REVIEW_REPLY_DATE, L.HOST_CODE
, RR.REVIEW_REPLY_CODE
FROM REVIEW R
LEFT JOIN MEMBER_PROFILE M
ON R.MEMBER_CODE = M.MEMBER_CODE
    LEFT JOIN REVIEW_IMG RVIMG
    ON R.REVIEW_CODE = RVIMG.REVIEW_CODE
        LEFT JOIN REVIEW_REPLY RR
        ON R.REVIEW_CODE = RR.REVIEW_CODE
            JOIN LOC L
            ON R.LOC_CODE = L.LOC_CODE
ORDER BY R.REVIEW_DATE DESC;
-->뷰
SELECT REVIEW_CODE, MEMBER_NICKNAME, REVIEW_RATE, REVIEW_CONTENT, REVIEW_DATE
, REVIEW_IMG_URL, RVIMGCOUNT, REVIEWREMOVECOUNT, REPLYCOUNT, REPLYREMOVECOUNT
, MEMBER_CODE, REVIEW_REPLY_CONTENT, REVIEW_REPLY_DATE, HOST_CODE, REVIEW_REPLY_CODE
FROM VIEW_REVIEW WHERE LOC_CODE='L000003'
;


--○ 해당 공간의 리뷰 갯수
SELECT * FROM VIEW_REVIEW WHERE LOC_CODE='L000001'
;

--○ 이용자 : QnA 작성
INSERT INTO QNA(QNA_CODE, LOC_CODE, MEMBER_CODE, QNA_CONTENT, QNA_DATE)
VALUES(F_CODE('Q', Q_SEQ.NEXTVAL), 'L000001' ,'M000001', '입력받은 내용 넘기기', SYSDATE)
;

--○ 이용자 : QnA 수정할 내용 가져오기
SELECT QNA_CODE, LOC_CODE, QNA_CONTENT
FROM QNA
WHERE QNA_CODE='Q000024';


--○ 이용자 : QnA 수정
UPDATE QNA SET QNA_CONTENT = '수정한 콘텐츠입니다.', QNA_DATE=SYSDATE WHERE QNA_CODE = 'Q000001';
;

--○ 이용자 : QnA 삭제
INSERT INTO QNA_REMOVE (QNA_REMOVE_CODE, QNA_CODE, QNA_REMOVE_DATE) VALUES(F_CODE('QRM', QRM_SEQ.NEXTVAL), 'Q000001', SYSDATE)
;

--○ 이용자 이용내역여부 확인(후기작성 버튼 출력여부)
SELECT B.MEMBER_CODE, A.APPLY_PACKAGE_CODE, F.LOC_CODE
, A.APPLY_DATE
FROM BOOK_LIST B
JOIN APPLY_PACKAGE A
ON B.APPLY_PACKAGE_CODE = A.APPLY_PACKAGE_CODE
    JOIN PACKAGE P
    ON A.PACKAGE_CODE = P.PACKAGE_CODE
        JOIN PACKAGE_FORM F
        ON P.PACKAGE_FORM_CODE = F.PACKAGE_FORM_CODE
WHERE NOT EXISTS (SELECT MCL.BOOK_CODE FROM MEMBER_CANCEL_LIST MCL);
-- 뷰 확인
SELECT COUNT(*) AS COUNT
FROM VIEW_MEMBER_BOOK
WHERE MEMBER_CODE='M000001';

SELECT BOOK_CODE
FROM MEMBER_CANCEL_LIST;


-- 1. 해당 공간에 대해 취소되지 않은 예약 횟수가... 1 이상이고 
-- 2. 해당 공간에 대해 작성한 리뷰개수가 예약횟수보다 작으면...!

----------------------------------------------------------------------------------------------
/*
* bookApply 5
●
1. 공간테이블에서 예약할 공간의 정보를 조회하는 쿼리문
   1-1. 기본설명 : 공간설명(공간한줄소개), 공간유형, 예약인원(최소,최대)
   1-2. 예약정보 : 예약날짜(적용패키지.적용일자), 예약인원(전페이지로부터 받아옴)
   1-3. 예약자정보 : (디폴트값으로 하는경우)회원정보(이름, 이메일, 연락처)
   1-4. 호스트정보 : 공간상호명, 대표자명, 소재지, 사업자번호, 연락처(이메일, 휴대폰, 대표전화)
   1-5. 주의사항 : 주의사항.주의사항 내용
♥
1. 예약자정보는 직접 입력도 가능하지만 체크 버튼을 통해 현재 로그인한 회원의 정보를 디폴트값으로 받아올 수 있도록 
2. 필수입력사항 미입력, 서비스 동의를 하지 않으면 결제 불가능
*/


--○ 예약자정보
SELECT MEMBER_NAME, MEMBER_EMAIL, MEMBER_TEL, MEMBER_CODE, 
FROM MEMBER_PROFILE;

--○ 사업자정보
SELECT B.BIZ_NAME, B.BIZ_CEO, B.BIZ_CEO_TYPE,
B.BIZ_MAIN_TYPE, B.BIZ_SUB_TYPE, B.BIZ_LICENSE_NUMBER
, LC.LOC_EMAIL, LC.LOC_TEL, LC.LOC_MAIN_TEL
, B.BIZ_ADDR, B.LOC_CODE
FROM BIZ_INFO B
    JOIN LOC_CONTACT LC
    ON B.LOC_CODE = LC.LOC_CODE
WHERE B.LOC_CODE='L000001';
--
SELECT LOC_CODE, BIZ_NAME, BIZ_CEO, BIZ_LICENSE_NUMBER
, BIZ_ADDR, LOC_EMAIL, LOC_TEL, LOC_MAIN_TEL 
FROM VIEW_BIZ_CONTACT
WHERE LOC_CODE = 'L000001';

--○ 멤버 프로필 가져오기
SELECT MEMBER_CODE, MEMBER_NAME, MEMBER_TEL
FROM MEMBER_PROFILE
WHERE MEMBER_CODE='M000004';


--○ 선택한 패키지 정보 조회(패키지코드 입력시 확인가능)
SELECT PF.LOC_CODE, P.PACKAGE_CODE, P.PACKAGE_FORM_CODE, P.PACKAGE_NAME
, P.PACKAGE_START, P.PACKAGE_END, P.PACKAGE_PRICE, AP.APPLY_DATE, AP.APPLY_PACKAGE_CODE
FROM PACKAGE P
JOIN PACKAGE_FORM PF
ON P.PACKAGE_FORM_CODE = PF.PACKAGE_FORM_CODE
    JOIN APPLY_PACKAGE AP
    ON P.PACKAGE_CODE = AP.PACKAGE_CODE;
--> 뷰로 보기
SELECT PACKAGE_NAME, APPLY_PACKAGE_CODE
, PACKAGE_START, PACKAGE_END, PACKAGE_PRICE, APPLY_DATE
, NVL(PACKAGE_END, 0) - NVL(PACKAGE_START, 0) AS HOURS
FROM VIEW_APPLY_PACKAGE_INFO
WHERE APPLY_PACKAGE_CODE = 'AP000004';


--○ 마일리지 있으면 예약 내역테이블 insert
INSERT INTO BOOK_LIST (BOOK_CODE, MEMBER_CODE, APPLY_PACKAGE_CODE
, BOOK_PEOPLE, BOOK_DATE, BOOK_REQ)
VALUES(F_CODE('BC', BC_SEQ.NEXTVAL), 'M000001', 'AP000001', 3, SYSDATE, '잘해주세요');

--○ 방금 한 예약번호 가져옴
SELECT BOOK_CODE
FROM 
(SELECT BOOK_CODE FROM BOOK_LIST WHERE MEMBER_CODE='M000001' ORDER BY BOOK_CODE DESC)
WHERE ROWNUM=1;

--○ 실예약자 테이블 insert
INSERT INTO ACTUAL_BOOKER (ACTUAL_BOOKER_CODE, BOOK_CODE, ACTUAL_BOOKER
, ACTUAL_BOOKER_TEL)
VALUES(F_CODE('AB', AB_SEQ.NEXTVAL), 'BC000006', '진짜영은', '010-3690-7828');


--○ 예약결제내역 테이블 insert
INSERT INTO BOOK_PAY_LIST(BOOK_PAY_CODE, BOOK_CODE, BOOK_PAY_DATE)
VALUES(F_CODE('BP', BP_SEQ.NEXTVAL), 'BC000006', SYSDATE);


--○ 마일리지 없으면 결제페이지로 이동

insert into load_reg(load_reg_code, member_code, load_amount, load_reg_date)
values(F_CODE('LR',LR_SEQ.NEXTVAL), 'M000002', '500000', SYSDATE);

COMMIT;

INSERT INTO LOAD_PROC(LOAD_PROC_CODE, LOAD_REG_CODE, LOAD_TYPE_CODE, LOAD_PROC_DATE)
VALUES(F_CODE('LP', LP_SEQ.NEXTVAL), 'LR000008', 'LT000001', SYSDATE);

update apply_package
set 
apply_date = to_date('2021-02-02', 'yyyy-mm-dd')
where apply_package_code='AP000004';

select *
from book_list;

EXEC PRC_BOOK_CODE_INSERT('M000002', '김아무개', '010-3690-7828');


--------------------------------------------------------------------------------
--※ BookApplyNotice.jsp
/*
결제내역 확인
예약자명
진영은
연락처
010-1234-1234
이메일
papajon@lookation.com
인원수
3명
요청사항
고통을 멈춰주세요
결제금액
200,000

*/
SELECT A.ACTUAL_BOOKER, A.ACTUAL_BOOKER_TEL, B.BOOK_PEOPLE, B.BOOK_DATE, B.BOOK_REQ
, AP.APPLY_DATE, P.PACKAGE_NAME, P.PACKAGE_START, P.PACKAGE_END
, P.PACKAGE_PRICE
FROM BOOK_LIST B
    JOIN ACTUAL_BOOKER A
    ON B.BOOK_CODE = A.BOOK_CODE
        JOIN APPLY_PACKAGE AP
        ON B.APPLY_PACKAGE_CODE = AP.APPLY_PACKAGE_CODE
            LEFT JOIN PACKAGE P
            ON AP.PACKAGE_CODE = P.PACKAGE_CODE;

SELECT BOOK_CODE, ACTUAL_BOOKER, ACTUAL_BOOKER_TEL, BOOK_PEOPLE, BOOK_REQ
, APPLY_DATE, PACKAGE_NAME, PACKAGE_START, PACKAGE_END
, PACKAGE_PRICE
FROM VIEW_BOOKAPPLYNOTICE
WHERE BOOK_CODE = (SELECT BOOK_CODE
                     FROM 
                    (SELECT BOOK_CODE 
                       FROM BOOK_LIST 
                      WHERE MEMBER_CODE='M000005' 
                   ORDER BY BOOK_CODE DESC)
                   WHERE ROWNUM=1);
                   
                   
/*
* bookList 5
●
1. 예약 테이블 정보를 조회하는 쿼리문
   (예약코드, 예약자명, 공간명, 일자, 인원수, 가격, 요청사항, 상태)
2. 예약취소 클릭시 예약취소 테이블에 데이터 INSERT 쿼리문 
♥
1. 검색은 할필요 없음
2. 최신 순으로 정렬 필요.
3. 공간명을 나오게 하고 상세보기 팝업으로(예약인원수, 요청사항, 가격)
   나머지(예약코드, 예약자명, 예약현황, 예약취소)는 리스트로 보여줌
4. 취소 클릭시 취소사유를 입력하기 위한 팝업창이 필요


*/

-- 예약내용(패키지 날짜, 시간 총 몇시간) 공간명 예약현황, 
SELECT DISTINCT B.BOOK_CODE, B.MEMBER_CODE, A.APPLY_PACKAGE_CODE, F.LOC_CODE
, TO_DATE(A.APPLY_DATE,'YYYY-MM-DD') AS APPLY_DATE, P.PACKAGE_CODE, P.PACKAGE_NAME
, P.PACKAGE_START, P.PACKAGE_END
, NVL(P.PACKAGE_END, 0) - NVL(P.PACKAGE_START, 0) AS BOOK_HOUR
, (SELECT COUNT(*) FROM HOST_CANCEL_LIST HC WHERE B.BOOK_CODE = HC.BOOK_CODE) AS HOST_CANCEL
, (SELECT COUNT(*) FROM MEMBER_CANCEL_LIST MC WHERE B.BOOK_CODE = MC.BOOK_CODE) AS MEMBER_CANCEL
, (SELECT COUNT(*) FROM BOOK_REFUND_LIST BRF WHERE B.BOOK_CODE = BRF.BOOK_CODE) AS REFUND
, LBIF.LOC_NAME, AB.ACTUAL_BOOKER, AB.ACTUAL_BOOKER_TEL
, B.BOOK_PEOPLE, BOOK_DATE, BOOK_REQ, P.PACKAGE_PRICE
, BZ.BIZ_NAME, BZ.BIZ_CEO, BIZ_LICENSE_NUMBER
, MC.MEMBER_CANCEL_REASON, HC.HOST_CANCEL_REASON
, MP.MEMBER_EMAIL, LBIF.LOC_ADDR, LBIF.LOC_DETAIL_ADDR
, MP.MEMBER_NICKNAME
FROM BOOK_LIST B
JOIN APPLY_PACKAGE A
ON B.APPLY_PACKAGE_CODE = A.APPLY_PACKAGE_CODE
    JOIN PACKAGE P
    ON A.PACKAGE_CODE = P.PACKAGE_CODE
        JOIN PACKAGE_FORM F
        ON P.PACKAGE_FORM_CODE = F.PACKAGE_FORM_CODE
            JOIN REVIEW R
            ON B.MEMBER_CODE = R.MEMBER_CODE
                JOIN LOC_BASIC_INFO LBIF
                ON F.LOC_CODE = LBIF.LOC_CODE
                    JOIN ACTUAL_BOOKER AB
                    ON B.BOOK_CODE=AB.BOOK_CODE
                        JOIN BIZ_INFO BZ
                        ON F.LOC_CODE = BZ.LOC_CODE
                            LEFT JOIN HOST_CANCEL_LIST HC
                            ON B.BOOK_CODE = HC.BOOK_CODE
                                LEFT JOIN MEMBER_CANCEL_LIST MC
                                ON B.BOOK_CODE = MC.BOOK_CODE
                                    JOIN MEMBER_PROFILE MP
                                    ON B.MEMBER_CODE = MP.MEMBER_CODE;
--○ 내용보기
SELECT BOOK_CODE, MEMBER_CODE, APPLY_PACKAGE_CODE, LOC_CODE
, APPLY_DATE, PACKAGE_CODE, PACKAGE_NAME
, PACKAGE_START, PACKAGE_END
, BOOK_HOUR, HOST_CANCEL, MEMBER_CANCEL, REFUND, LOC_NAME
FROM VIEW_BOOKLIST
WHERE MEMBER_CODE = 'M000001'
ORDER BY APPLY_DATE;


--○ 예약상세
SELECT BOOK_CODE, MEMBER_CODE
, APPLY_DATE, PACKAGE_NAME
, PACKAGE_START, PACKAGE_END
, BOOK_HOUR, HOST_CANCEL, MEMBER_CANCEL, REFUND, LOC_NAME
, ACTUAL_BOOKER, ACTUAL_BOOKER_TEL
, BOOK_PEOPLE, BOOK_DATE, BOOK_REQ, PACKAGE_PRICE
, BIZ_NAME, BIZ_CEO, BIZ_LICENSE_NUMBER
, MEMBER_CANCEL_REASON, HOST_CANCEL_REASON
, MEMBER_EMAIL, LOC_ADDR, LOC_DETAIL_ADDR
, MEMBER_NICKNAME
FROM VIEW_BOOKLIST
WHERE BOOK_CODE = 'BC000001';



--○ 환불계산
/*
이용시작일자 4일 전이므로
예약 가격의 50%인 100,000원이 마일리지로 환불됩니다.
*/
--○ 취소팝업 환불 계산
SELECT BOOK_CODE, BOOK_HOUR, LOC_NAME
, APPLY_DATE, PACKAGE_START, PACKAGE_END
, PACKAGE_PRICE
, TO_DATE(APPLY_DATE, 'YYYY-MM-DD')- TRUNC(TO_DATE(SYSDATE, 'YYYY-MM-DD')) AS DAYS --0 이면 당일// 취소버튼 비활
FROM VIEW_BOOKLIST;
WHERE BOOK_CODE = 'BC000001';

--○ 취소버튼 클릭시 취소내역 추가
INSERT INTO MEMBER_CANCEL_LIST (MEMBER_CANCEL_CODE, BOOK_CODE, MEMBER_CANCEL_REASON, MEMBER_CANCEL_DATE)
VALUES(F_CODE('MC', MC_SEQ.NEXTVAL), 'BC000003', '힘들어서 안갈랍니다', SYSDATE);

--○ 예약 환불 내역 추가 
INSERT INTO BOOK_REFUND_LIST (BOOK_REFUND_CODE, BOOK_CODE, BOOK_REFUND_DATE)
VALUES(F_CODE('BRF', BRF_SEQ.NEXTVAL), 'BC000003', SYSDATE);

--○ 닉네임 검색
SELECT MEMBER_NICKNAME
FROM MEMBER_PROFILE
WHERE MEMBER_CODE='M000002';


--------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
--○ userReviewList

SELECT *
FROM REVIEW;

--○ 이용자 : 리뷰 작성
INSERT INTO REVIEW(REVIEW_CODE, LOC_CODE, MEMBER_CODE, REVIEW_RATE, REVIEW_CONTENT, REVIEW_DATE)
VALUES(F_CODE('RV', RV_SEQ.NEXTVAL), 'L000003', 'M000005', 3, '데이터베이스로 리뷰를 써봅니다... 우하하', SYSDATE);


--○ 이용자 : 리뷰 수정폼 내용 가져오기
SELECT REVIEW_CODE, LOC_CODE, REVIEW_CONTENT, REVIEW_RATE
FROM REVIEW
WHERE REVIEW_CODE='RV000001';

--○ 이용자 : 리뷰 수정
UPDATE REVIEW
SET REVIEW_RATE=4, REVIEW_CONTENT='이렇게', REVIEW_DATE=SYSDATE
WHERE REVIEW_CODE = 'RV000001';

--○ 이용자 : 리뷰 삭제
INSERT INTO REVIEW_REMOVE(REVIEW_REMOVE_CODE, REVIEW_CODE, REVIEW_REMOVE_DATE)
VALUES(F_CODE('RVRM', RV_SEQ.NEXTVAL), 'RV000010', SYSDATE);


--○ 호스트 : 리뷰 답글 작성
INSERT INTO REVIEW_REPLY (REVIEW_REPLY_CODE, REVIEW_CODE, REVIEW_REPLY_CONTENT, REVIEW_REPLY_DATE)
VALUES(F_CODE('RVRE', RVRE_SEQ.NEXTVAL), 'RV000006', '컨텐츠', SYSDATE);

--○ 호스트 : 리뷰 수정폼 불러오기
SELECT REVIEW_REPLY_CODE, REVIEW_REPLY_CONTENT
FROM REVIEW_REPLY
WHERE REVIEW_REPLY_CODE='RVRE000001';

--○ 호스트 : 리뷰 답글 수정
UPDATE REVIEW_REPLY
SET REVIEW_REPLY_CONTENT='이렇게', REVIEW_REPLY_DATE=SYSDATE
WHERE REVIEW_REPLY_CODE='RVRE000001';


--○ 호스트 : 리뷰답글 삭제시
INSERT INTO REVIEW_REPLY_REMOVE (REVIEW_REPLY_REMOVE_CODE, REVIEW_REPLY_CODE, REVIEW_REPLY_REMOVE_DATE)
VALUES(F_CODE('RVRERM', RVRERM_SEQ.NEXTVAL), 'RVRE000004', SYSDATE);


--○ 호스트 : QNA 답글 작성
INSERT INTO QNA_REPLY (QNA_REPLY_CODE, QNA_CODE, QNA_REPLY_CONTENT, QNA_REPLY_DATE)
VALUES(F_CODE('QRE', QRE_SEQ.NEXTVAL), 'Q000001', '답글 답니다.', SYSDATE);


--○ 호스트 : QNA 수정폼 불러오기
SELECT QNA_REPLY_CODE, QNA_REPLY_CONTENT
FROM QNA_REPLY
WHERE QNA_REPLY_CODE ='QRE000001';

--○ 호스트 : QNA 답글 수정
UPDATE QNA_REPLY
SET QNA_REPLY_CONTENT='안녕', QNA_REPLY_DATE=SYSDATE
WHERE QNA_REPLY_CODE='QRE000001';


--○ 호스트 : QNA 답글 삭제
INSERT INTO QNA_REPLY_REMOVE(QNA_REPLY_REMOVE_CODE, QNA_REPLY_CODE, QNA_REPLY_REMOVE_DATE)
VALUES(F_CODE('QRERM', QRERM_SEQ.NEXTVAL), 'QRE000001', SYSDATE); 


--○ 리뷰 평균 별점 구하기
SELECT ROUND(AVG(NVL(REVIEW_RATE, 0)), 2) AS AVGSTAR
FROM REVIEW
WHERE LOC_CODE='L000007';

SELECT *
FROM REVIEW;

--------------------------------------------------------------------------------
/*
*userQnaList 6(X)
●
1. 이용자가 작성한 QnA를 조회하는 쿼리문
    (Q&A코드, 해당공간명, 내용, 작성일)
   1-1. 삭제된 QnA와 조인하여 삭제여부를 알수 있게
2. 삭제버튼 클릭시 삭제내역에 해당 QnA코드를 참조하는 데이터를 INSERT
♥
1. 삭제된 Q&A 경우에는 보여주지 않는다.
2. 삭제시에도 알림
*/

--○ 이용자가 작성한 QnA
SELECT Q.QNA_CODE, Q.LOC_CODE, Q.MEMBER_CODE
, Q.QNA_CONTENT, Q.QNA_DATE, LBIF.LOC_NAME
, (SELECT COUNT(*) FROM QNA_REMOVE QRM WHERE Q.QNA_CODE = QRM.QNA_CODE) AS REMOVECOUNT
FROM QNA Q
JOIN LOC L
ON Q.LOC_CODE = L.LOC_CODE
    JOIN LOC_BASIC_INFO LBIF
    ON L.LOC_CODE = LBIF.LOC_CODE;
    
-- 뷰에서
SELECT QNA_CODE, LOC_CODE, MEMBER_CODE
, QNA_CONTENT, QNA_DATE, LOC_NAME
, REMOVECOUNT
FROM VIEW_USER_QNA
WHERE MEMBER_CODE='M000002'
ORDER BY QNA_CODE DESC;

--○ 삭제버튼 클릭시 QNA REMOVE
INSERT INTO QNA_REMOVE (QNA_REMOVE_CODE, QNA_CODE, QNA_REMOVE_DATE)
VALUES(F_CODE('QRM', QRM_SEQ.NEXTVAL), 'Q000001', SYSDATE);

--○ 유저 닉네임 검색
SELECT MEMBER_NICKNAME
FROM MEMBER_PROFILE
WHERE MEMBER_CODE = 'M000002';


--○ 이용자가 작성한 리뷰
SELECT R.REVIEW_CODE, R.MEMBER_CODE
, R.REVIEW_CONTENT, R.REVIEW_RATE, R.REVIEW_DATE, LBIF.LOC_NAME
, (SELECT COUNT(*) FROM REVIEW_REMOVE RVRM WHERE R.REVIEW_CODE = RVRM.REVIEW_CODE) AS REMOVECOUNT
FROM REVIEW R
JOIN LOC L
ON R.LOC_CODE = L.LOC_CODE
    JOIN LOC_BASIC_INFO LBIF
    ON L.LOC_CODE = LBIF.LOC_CODE;
-- 뷰 작성
SELECT REVIEW_CODE, MEMBER_CODE
, REVIEW_CONTENT, REVIEW_RATE, REVIEW_DATE, LOC_NAME
, REMOVECOUNT
FROM VIEW_USER_REVIEW
WHERE MEMBER_CODE = 'M000001';

----------------------------------------------------------------------------------------------

/*

* hostAccountManager(호스트회원관리) 7
●
1. 호스트 테이블로 부터 데이터를 조회하는 쿼리문
   (회원코드, 아이디, 닉네임, 블랙여부, [블랙처리사유])
   1-1. 블랙리스트 테이블을 통해 블랙리스트 여부 확인 필요
2. 블랙리스트 설정시 블랙리스트 테이블에 INSERT하는 쿼리문
3. 블랙리스트 해제시 블랙리스트 테이블에서 DELETE하는 쿼리문
4. 신고내역(공간) 테이블로 부터 데이터를 조회하는 쿼리문
   (신고일자, 신고사유, 신고처리상태, 신고유형) 

♥
1. 신고내역 버튼누르면 모든 신고내역이 팝업창으로 나와야함.
2. 블랙리스트 설정시 팝업창으로 사유를 적을 수 있게, 해제시에는 알림으로 다시한번 확인
*/

--○ 호스트 블랙리스트 확인하는 쿼리
SELECT H.HOST_EMAIL, H.HOST_NICKNAME
, HB.HOST_BLACKLIST_REASON
, (SELECT COUNT(*) FROM HOST_BLACKLIST HB 
    WHERE H.HOST_EMAIL=HB.HOST_EMAIL) AS YESBLACK
FROM HOST_PROFILE H
    LEFT JOIN HOST_BLACKLIST HB
    ON H.HOST_EMAIL = HB.HOST_EMAIL;
-- 뷰
SELECT HOST_CODE, HOST_EMAIL, HOST_NICKNAME
, HOST_BLACKLIST_REASON, YESBLACK
FROM VIEW_HOSTBLACKLIST;


--○ 호스트 블랙리스트 설정시 블랙리스트 테이블 INSERT
SELECT HOST_EMAIL
FROM HOST_PROFILE
WHERE HOST_CODE = 'H000001';

INSERT INTO HOST_BLACKLIST(HOST_EMAIL, HOST_BLACKLIST_REASON, HOST_BLACKLIST_DATE)
VALUES('good1@test.com', '사유일세', SYSDATE);

-- ○ 블랙리스트 해제시 DELETE
DELETE 
FROM HOST_BLACKLIST
WHERE HOST_EMAIL = 'good1@test.com';


--○ 호스트 신고내역 팝업
-- 신고횟수, 회원코드, 신고코드, 신고유형,신고사유,신고일자
SELECT H.HOST_CODE, L.LOC_CODE, LR.LOC_REPORT_CODE
, LR.MEMBER_CODE, LR.LOC_REPORT_REASON, LR.LOC_REPORT_DATE
, LRPT.LOC_REPORT_TYPE, RPPT.REPORT_PROC_TYPE
FROM HOST H
LEFT JOIN LOC L
ON H.HOST_CODE = L.HOST_CODE
    JOIN LOC_REPORT LR
    ON L.LOC_CODE = LR.LOC_CODE
        JOIN LOC_REPORT_TYPE LRPT
        ON LR.LOC_REPORT_TYPE_CODE=LRPT.LOC_REPORT_TYPE_CODE
            LEFT JOIN LOC_REPORT_PROC LRPP
            ON LR.LOC_REPORT_CODE=LRPP.LOC_REPORT_CODE
                LEFT JOIN REPORT_PROC_TYPE RPPT
                ON LRPP.REPORT_PROC_TYPE_CODE=RPPT.REPORT_PROC_TYPE_CODE;

-- 뷰
SELECT HOST_CODE, LOC_CODE, LOC_REPORT_CODE
, LOC_REPORT_REASON, LOC_REPORT_DATE
, LOC_REPORT_TYPE, REPORT_PROC_TYPE
FROM VIEW_HOST_REPORTDETAILS
WHERE HOST_CODE ='H000007';
/*

* userAccountManager(이용자회원관리) 7
●
1. 이용자 테이블로 부터 데이터를 조회하는 쿼리문
   (회원코드, 아이디, 닉네임, 블랙여부, [블랙처리사유])
   1-1. 블랙리스트 테이블을 통해 블랙리스트 여부 확인 필요
2. 블랙리스트 설정시 블랙리스트 테이블에 INSERT하는 쿼리문
3. 블랙리스트 해제시 블랙리스트 테이블에서 DELETE하는 쿼리문
4. 신고내역(예약) 테이블로 부터 데이터를 조회하는 쿼리문
   (신고일자, 신고사유, 신고처리상태, 신고유형) 

♥
1. 신고내역 버튼누르면 모든 신고내역이 팝업창으로 나와야함.
2. 블랙리스트 설정시 팝업창으로 사유를 적을 수 있게, 해제시에는 알림으로 다시한번 확인

* blacklistPopup.jsp 7

* reportDetailPopupHost.jsp 7
* reportDetailPopupUser.jsp 7

*/

--○ 이용자 블랙리스트 여부 확인하는 쿼리
SELECT M.MEMBER_CODE, M.MEMBER_EMAIL, M.MEMBER_NICKNAME
, MB.MEMBER_BLACKLIST_REASON
, (SELECT COUNT(*) FROM MEMBER_BLACKLIST MB 
    WHERE M.MEMBER_EMAIL=MB.MEMBER_EMAIL) AS YESBLACK
FROM MEMBER_PROFILE M
    LEFT JOIN MEMBER_BLACKLIST MB
    ON M.MEMBER_EMAIL = MB.MEMBER_EMAIL;
-- 뷰
SELECT MEMBER_CODE, MEMBER_EMAIL, MEMBER_NICKNAME
, MEMBER_BLACKLIST_REASON, YESBLACK
FROM VIEW_MEMBERBLACKLIST;




--○ 멤버 블랙리스트 설정시 블랙리스트 테이블 INSERT
SELECT MEMBER_EMAIL
FROM MEMBER_PROFILE
WHERE MEMBER_CODE = 'M000001';

INSERT INTO MEMBER_BLACKLIST(MEMBER_EMAIL, MEMBER_BLACKLIST_REASON, MEMBER_BLACKLIST_DATE)
VALUES('test2@test.com', '사유일세', SYSDATE);

-- ○ 블랙리스트 해제시 DELETE
DELETE 
FROM MEMBER_BLACKLIST
WHERE MEMBER_EMAIL = 'test2@test.com';


--○ 이용자 신고내역 팝업
-- 회원코드, 신고코드, 신고유형,신고사유,신고일자
SELECT B.BOOK_REPORT_CODE, B.BOOK_CODE, BR.BOOK_REPORT_TYPE
, B.BOOK_REPORT_REASON, B.BOOK_REPORT_DATE, BL.MEMBER_CODE
FROM BOOK_REPORT B
JOIN BOOK_REPORT_TYPE BR
ON B.BOOK_REPORT_TYPE_CODE = BR.BOOK_REPORT_TYPE_CODE
    LEFT JOIN BOOK_REPORT_PROC BRP
    ON B.BOOK_REPORT_CODE = BRP.BOOK_REPORT_CODE
        JOIN BOOK_LIST BL
        ON B.BOOK_CODE = BL.BOOK_CODE;

-- 뷰
SELECT BOOK_REPORT_CODE, BOOK_CODE, BOOK_REPORT_TYPE
, BOOK_REPORT_REASON, BOOK_REPORT_DATE, MEMBER_CODE
FROM VIEW_MEMBER_REPORTDETAILS
WHERE MEMBER_CODE = 'M000001';


----------------------------------------------------------------------------------------------
SELECT *
FROM HOST_MSG_INFO;

-- 호스트 메신저 조회
SELECT DISTINCT H.HOST_MSG_INFO_CODE, H.MSG_CODE
, H.HOST_MSG_CONTENT, H.HOST_MSG_DATE
, M.BOOK_CODE
, AP.APPLY_DATE
, B.MEMBER_CODE -- 수신자
, M.MEMBER_NICKNAME
, HP.HOST_CODE
, HP.HOST_NICKNAME -- 송신자
, (SELECT COUNT(*) FROM HOST_MSG_IMG HI
    WHERE H.HOST_MSG_INFO_CODE = HI.HOST_MSG_INFO_CODE) AS H_IMGCOUNT
, HI.HOST_MSG_IMG_URL
FROM MSG M
    JOIN HOST_MSG_INFO H
    ON M.MSG_CODE = H.MSG_CODE
        JOIN BOOK_LIST B
        ON M.BOOK_CODE = B.BOOK_CODE
            JOIN APPLY_PACKAGE AP
            ON B.APPLY_PACKAGE_CODE = AP.APPLY_PACKAGE_CODE
                JOIN PACKAGE P
                ON AP.PACKAGE_CODE = P.PACKAGE_CODE
                    JOIN PACKAGE_FORM PF
                    ON P.PACKAGE_FORM_CODE = PF.PACKAGE_FORM_CODE
                        JOIN LOC L
                        ON PF.LOC_CODE = L.LOC_CODE
                            JOIN HOST_PROFILE HP
                            ON L.HOST_CODE = HP.HOST_CODE
                                JOIN MEMBER_PROFILE M  -- 멤버탈퇴시 안보임
                                ON B.MEMBER_CODE = M.MEMBER_CODE
                                    LEFT JOIN HOST_MSG_IMG HI
                                    ON H.HOST_MSG_INFO_CODE = HI.HOST_MSG_INFO_CODE;



-- 뷰 작성
SELECT HOST_MSG_INFO_CODE, MSG_CODE
, HOST_MSG_CONTENT, HOST_MSG_DATE
, HOST_CODE, HOST_NICKNAME
, BOOK_CODE, APPLY_DATE
, MEMBER_CODE, MEMBER_NICKNAME
, H_IMGCOUNT, HOST_MSG_IMG_URL
FROM VIEW_HOST_MESSENGER;


-- 멤버 입장에서 메시지 조회 
SELECT MM.MEMBER_MSG_INFO_CODE, MM.MSG_CODE
, MM.MEMBER_MSG_CONTENT, MM.MEMBER_MSG_DATE
, M.BOOK_CODE
, AP.APPLY_DATE
, B.MEMBER_CODE -- 송신자
, M.MEMBER_NICKNAME
, HP.HOST_CODE
, HP.HOST_NICKNAME -- 송신자
, (SELECT COUNT(*) FROM MEMBER_MSG_IMG MI
    WHERE MM.MEMBER_MSG_INFO_CODE = MI.MEMBER_MSG_INFO_CODE) AS M_IMGCOUNT
, MI.MEMBER_MSG_IMG_URL
FROM MEMBER_MSG_INFO MM
    JOIN MSG M
    ON MM.MSG_CODE = M.MSG_CODE
        JOIN BOOK_LIST B
        ON M.BOOK_CODE = B.BOOK_CODE
            JOIN APPLY_PACKAGE AP
            ON B.APPLY_PACKAGE_CODE = AP.APPLY_PACKAGE_CODE
                JOIN PACKAGE P
                ON AP.PACKAGE_CODE = P.PACKAGE_CODE
                    JOIN PACKAGE_FORM PF
                    ON P.PACKAGE_FORM_CODE = PF.PACKAGE_FORM_CODE
                        JOIN LOC L
                        ON PF.LOC_CODE = L.LOC_CODE
                            JOIN HOST_PROFILE HP
                            ON L.HOST_CODE = HP.HOST_CODE
                                JOIN MEMBER_PROFILE M  -- 멤버탈퇴시 안보임
                                ON B.MEMBER_CODE = M.MEMBER_CODE
                                    LEFT JOIN MEMBER_MSG_IMG MI
                                    ON MM.MEMBER_MSG_INFO_CODE = MI.MEMBER_MSG_INFO_CODE;

--○ 메시지 전체 다 보는 뷰
SELECT MSG_CODE, MSG_CONTENT, MSG_DATE
, SENDER_CODE, SENDER
, IMGCOUNT, MSG_IMG_URL
, BOOK_CODE, APPLY_DATE, HORM
FROM VIEW_MESSENGER;

--○ 호스트 닉네임 찾기
--예약코드로 서로 닉 찾아보기 
SELECT HOST_NICKNAME
FROM VIEW_BOOK_NICKNAME
WHERE BOOK_CODE='BC000001';

--○ 메신저코드 검색
SELECT MSG_CODE FROM ( SELECT ROWNUM, MSG_CODE
FROM VIEW_MESSENGER
WHERE BOOK_CODE='BC000001')
WHERE ROWNUM <= 1;

--○ 이용자가 메시지 전송하는 경우
INSERT INTO MEMBER_MSG_INFO(MEMBER_MSG_INFO_CODE, MSG_CODE, MEMBER_MSG_CONTENT, MEMBER_MSG_DATE)
VALUES(F_CODE('MMIF', MMIF_SEQ.NEXTVAL), 'MSG000001', '어째서!!', SYSDATE);

--○ 이용자가 이미지 전송하는 경우
-- 프로시저 
CALL PRC_M_MSG_IMG('BC000001', '안냥');

--------------------------------------------------------------------------------
--○ 호스트 
--○ 상대방 닉네임 찾기
SELECT MEMBER_NICKNAME
FROM VIEW_BOOK_NICKNAME
WHERE BOOK_CODE='BC000001';

--○ 메신저코드 검색
SELECT MSG_CODE FROM ( SELECT ROWNUM, MSG_CODE
FROM VIEW_MESSENGER
WHERE BOOK_CODE='BC000001')
WHERE ROWNUM <= 1;

--○ 호스트가 메시지 전송하는 경우
INSERT INTO HOST_MSG_INFO(HOST_MSG_INFO_CODE, MSG_CODE, HOST_MSG_CONTENT, HOST_MSG_DATE)
VALUES(F_CODE('HMIF', HMIF_SEQ.NEXTVAL), 'MSG000001', '어째서!!', SYSDATE);


select *
from view_messenger
where book_code='BC000001';

--○ 호스트가 이미지 전송하는 경우
-- 프로시저 
CALL PRC_H_MSG_IMG('BC000001', '이건 이미지 주소요!');

SELECT * FROM MSG;



